<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="class-cluttertexture">
  <refmeta>
    <refentrytitle>clutter.Texture</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>PyGTK Docs</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>clutter.Texture</refname><refpurpose></refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

<classsynopsis language="python">
  <ooclass><classname>clutter.Texture</classname></ooclass>
  <ooclass><classname><link linkend="class-clutteractor">clutter.Actor</link></classname></ooclass>
<constructorsynopsis language="python">
    <methodname>__init__</methodname>
    <methodparam><parameter>filename</parameter><initializer>None</initializer></methodparam>
    <methodparam><parameter>disable_slicing</parameter><initializer>False</initializer></methodparam>
    <methodparam><parameter>load_async</parameter><initializer>False</initializer></methodparam>
    <methodparam><parameter>load_data_async</parameter><initializer>False</initializer></methodparam>
  </constructorsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--set-from-rgb-data">set_from_rgb_data</link></methodname>
    <methodparam><parameter>data</parameter></methodparam>
    <methodparam><parameter>has_alpha</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
    <methodparam><parameter>rowstride</parameter></methodparam>
    <methodparam><parameter>bpp</parameter></methodparam>
    <methodparam><parameter>flags</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--set-from-yuv-data">set_from_yuv_data</link></methodname>
    <methodparam><parameter>data</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
    <methodparam><parameter>flags</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--set-area-from-rgb-data">set_area_from_rgb_data</link></methodname>
    <methodparam><parameter>data</parameter></methodparam>
    <methodparam><parameter>has_alpha</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
    <methodparam><parameter>rowstride</parameter></methodparam>
    <methodparam><parameter>bpp</parameter></methodparam>
    <methodparam><parameter>flags</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--set-from-file">set_from_file</link></methodname>
    <methodparam><parameter>filename</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--set-filter-quality">set_filter_quality</link></methodname>
    <methodparam><parameter>filter_quality</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--get-filter-quality">get_filter_quality</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--get-max-tile-waste">get_max_tile_waste</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--get-cogl-texture">get_cogl_texture</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-cluttertexture--set-cogl-texture">set_cogl_texture</link></methodname>
    <methodparam><parameter>cogl_tex</parameter></methodparam>
  </methodsynopsis>
</classsynopsis>

  </refsect1>
  <refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">GObject</link>
  +-- <link linkend="class-clutteractor">clutter.Actor</link>
    +-- <link linkend="class-cluttertexture">clutter.Texture</link>
</synopsis>

  </refsect1>
  <refsect1>
    <title>Constructor</title>

<programlisting><constructorsynopsis language="python">
    <methodname>__init__</methodname>
    <methodparam><parameter>filename</parameter><initializer>None</initializer></methodparam>
    <methodparam><parameter>disable_slicing</parameter><initializer>False</initializer></methodparam>
    <methodparam><parameter>load_async</parameter><initializer>False</initializer></methodparam>
    <methodparam><parameter>load_data_async</parameter><initializer>False</initializer></methodparam>
  </constructorsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>filename</parameter>&nbsp;:</term>
      <listitem><simpara>a filename or <parameter>None</parameter></simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>disable_slicing</parameter>&nbsp;:</term>
      <listitem><simpara>if <parameter>True</parameter> slicing is disabled</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>load_async</parameter>&nbsp;:</term>
      <listitem><simpara>if <parameter>True</parameter> a worker thread is used to load the data from disk async, returning inmediately.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>load_data_async</parameter>&nbsp;:</term>
      <listitem><simpara>if <parameter>True</parameter> a worker thread is used to load the data from disk async, blocking until the widht and height of the data are determined.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link></simpara></listitem>
    </varlistentry>
  </variablelist>



  </refsect1>
  <refsect1>
    <title>Methods</title>

  <refsect2 id="method-cluttertexture--set-from-rgb-data">
    <title>clutter.Texture.set_from_rgb_data</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_from_rgb_data</methodname>
    <methodparam><parameter>data</parameter></methodparam>
    <methodparam><parameter>has_alpha</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
    <methodparam><parameter>rowstride</parameter></methodparam>
    <methodparam><parameter>bpp</parameter></methodparam>
    <methodparam><parameter>flags</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>data</parameter>&nbsp;:</term>
      <listitem><simpara>Image data in RGB colorspace.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>has_alpha</parameter>&nbsp;:</term>
      <listitem><simpara>Set to <parameter>True</parameter> if image data has alpha channel</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>Width in pixels of image data</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>Height in pixels of image data</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>rowstride</parameter>&nbsp;:</term>
      <listitem><simpara>Distance in bytes between row starts</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>bpp</parameter>&nbsp;:</term>
      <listitem><simpara>bytes per pixel (Currently only 3 or 4 are supported, depending on <parameter>has_alpha</parameter>)</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>flags</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterTextureFlags</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara><parameter>True</parameter> on success, <parameter>False</parameter> on failure.</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the texture from RGB image data. If an error ocurred False is returned.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--set-from-yuv-data">
    <title>clutter.Texture.set_from_yuv_data</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_from_yuv_data</methodname>
    <methodparam><parameter>data</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
    <methodparam><parameter>flags</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>data</parameter>&nbsp;:</term>
      <listitem><simpara>Image data in YUV type colorspace.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>Width in pixels of image data</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>Height in pixels of image data</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>flags</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterTextureFlags</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara><parameter>True</parameter> on success, <parameter>False</parameter> on failure.</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the texture from YUV image data. If an error ocurred False is returned.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--set-area-from-rgb-data">
    <title>clutter.Texture.set_area_from_rgb_data</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_area_from_rgb_data</methodname>
    <methodparam><parameter>data</parameter></methodparam>
    <methodparam><parameter>has_alpha</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
    <methodparam><parameter>rowstride</parameter></methodparam>
    <methodparam><parameter>bpp</parameter></methodparam>
    <methodparam><parameter>flags</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>data</parameter>&nbsp;:</term>
      <listitem><simpara>Image data in RGB type colorspace.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>has_alpha</parameter>&nbsp;:</term>
      <listitem><simpara>Set to <parameter>True</parameter> if image data has an alpha channel.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>X coordinate of upper left corner of region to update.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>Y coordinate of upper left corner of region to update.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>Width in pixels of region to update.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>Height in pixels of region to update.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>rowstride</parameter>&nbsp;:</term>
      <listitem><simpara>Distance in bytes between row starts.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>bpp</parameter>&nbsp;:</term>
      <listitem><simpara>bytes per pixel (Currently only 3 and 4 supported, depending on <parameter>has_alpha</parameter>)</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>flags</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterTextureFlags</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara><parameter>True</parameter> on success, <parameter>False</parameter> on failure.</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Updates a sub-region of the pixel data. If an error ocurred False is returned.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--set-from-file">
    <title>clutter.Texture.set_from_file</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_from_file</methodname>
    <methodparam><parameter>filename</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>filename</parameter>&nbsp;:</term>
      <listitem><simpara>The filename of the image.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara><parameter>True</parameter> if the image was successfully loaded and set.</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
      Sets the image data from a file. In case of failure <parameter>False</parameter> is returned.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--set-filter-quality">
    <title>clutter.Texture.set_filter_quality</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_filter_quality</methodname>
    <methodparam><parameter>filter_quality</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>filter_quality</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterTextureQuality</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the filter quality when scaling a texture. The quality is an enumeration currently the following values are supported: TEXTURE_QUALITY_LOW which is fast but only uses nearest neighbour interpolation. TEXTURE_QUALITY_MEDIUM which is computationally a bit more expensive (bilinear interpolation), and TEXTURE_QUALITY_HIGH which uses extra texture memory resources to improve scaled down rendering as well (by using mipmaps). The default value is TEXTURE_QUALITY_MEDIUM.
  </para>
  </refsect2>



  <refsect2 id="method-cluttertexture--get-filter-quality">
    <title>clutter.Texture.get_filter_quality</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_filter_quality</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a ClutterTextureQuality</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Returns the filter quality used when scaling a texture.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--get-max-tile-waste">
    <title>clutter.Texture.get_max_tile_waste</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_max_tile_waste</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>The maximum waste or -1 if the texture waste is unlimited.</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Returns the maximum waste that will be used when creating a texture or -1 if slicing is disabled.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--get-cogl-texture">
    <title>clutter.Texture.get_cogl_texture</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_cogl_texture</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a CoglHandle</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Retrieves the handle to the underlying COGL texture used for drawing the actor.
  </para>
  </refsect2>


  <refsect2 id="method-cluttertexture--set-cogl-texture">
    <title>clutter.Texture.set_cogl_texture</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_cogl_texture</methodname>
    <methodparam><parameter>cogl_tex</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>cogl_tex</parameter>&nbsp;:</term>
      <listitem><simpara>a CoglHandle</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Replaces the underlying COGL texture drawn by this actor with cogl_tex.
  </para>
  </refsect2>


  </refsect1>
</refentry>
